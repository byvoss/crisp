/**
 * CRISP Modern Features
 * Progressive enhancement with latest CSS
 */

/* Container Queries for Components */
.card {
  container-type: inline-size;
  container-name: card;
}

@container card (min-width: 400px) {
  .card {
    --card-padding: var(--space-2-0);
    --stack-gap: var(--space-1-5);
  }
  
  .card .button {
    --button-size: 1.125rem;
  }
}

/* CSS Nesting for Cleaner Code */
.button {
  /* Base styles */
  display: inline-flex;
  
  &:hover {
    transform: var(--button-hover-transform, translateY(-2px));
  }
  
  &:active {
    transform: var(--button-active-transform, translateY(0));
  }
  
  &:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }
  
  /* Nested modifiers */
  &.with-interaction {
    transition: transform var(--transition-fast);
    
    &:hover {
      --button-hover-transform: translateY(-2px);
    }
  }
}

/* Cascade Layers for Better Control */
@layer reset, tokens, layouts, components, properties, utilities;

@layer components {
  .card {
    /* Component styles have defined priority */
    background: var(--card-bg, white);
  }
}

@layer utilities {
  /* Utilities can override when needed */
  .hidden {
    display: none !important;
  }
}

/* CSS Scope for Component Isolation */
@scope (.form) {
  /* Scoped to form context only */
  .field {
    margin-bottom: var(--space-1-0);
  }
  
  .error {
    color: var(--color-error-50);
  }
  
  /* Nested scoping */
  @scope (.field) {
    label {
      font-weight: var(--text-weight-medium);
    }
    
    input:invalid {
      border-color: var(--color-error-50);
    }
  }
}

/* Modern Selectors */
.field:has(input:invalid) .error {
  /* Show error when input is invalid */
  display: block;
}

.button:has(svg) {
  /* Button with icon styling */
  --button-gap: var(--space-0-5);
}

/* Logical Properties */
.card {
  margin-block: var(--space-1-0);
  padding-inline: var(--card-padding);
  border-start-start-radius: var(--radius-md);
  border-start-end-radius: var(--radius-md);
}

/* Modern Color Functions */
.with-shadow::before {
  background: color-mix(
    in srgb,
    var(--shadow-color, black) 15%,
    transparent
  );
}

/* View Transitions API Support */
@supports (view-transition-name: card) {
  .card {
    view-transition-name: card;
  }
  
  ::view-transition-old(card) {
    animation: fade-out 200ms ease-out;
  }
  
  ::view-transition-new(card) {
    animation: fade-in 200ms ease-out;
  }
}

/* Subgrid for Better Layouts */
.as-grid {
  display: grid;
  
  & > .card {
    display: grid;
    grid-template-rows: subgrid;
    grid-row: span 3; /* header, content, footer */
  }
}

/* Anchor Positioning (Future) */
@supports (anchor-name: --tooltip) {
  [data-tooltip] {
    anchor-name: --tooltip;
  }
  
  [data-tooltip]::after {
    position: absolute;
    position-anchor: --tooltip;
    bottom: anchor(top);
    left: anchor(center);
  }
}

/* Custom Media Queries */
@custom-media --mobile (width < 768px);
@custom-media --tablet (768px <= width < 1024px);
@custom-media --desktop (width >= 1024px);

@media (--mobile) {
  .as-grid {
    --grid-columns: 1;
  }
}

/* Environment Variables */
.header {
  /* Account for notch on mobile */
  padding-top: max(var(--space-1-0), env(safe-area-inset-top));
}

/* Preference Queries */
@media (prefers-reduced-motion: no-preference) {
  .with-animation {
    animation: var(--animation-name) var(--animation-duration);
  }
}

@media (prefers-contrast: high) {
  .with-border {
    --border-width: 2px;
    --border-color: currentColor;
  }
}

@media (prefers-color-scheme: dark) {
  :root {
    --color-background: var(--color-neutral-10);
    --color-text: var(--color-neutral-90);
  }
}

/* Modern Grid Features */
.as-grid {
  display: grid;
  gap: var(--grid-gap, var(--space-1-0));
  grid-template-columns: repeat(
    auto-fit,
    minmax(min(100%, var(--grid-min, 250px)), 1fr)
  );
}